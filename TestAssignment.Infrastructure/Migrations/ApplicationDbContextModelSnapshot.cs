// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestAssignment.Infrastructure.Data;

#nullable disable

namespace TestAssignment.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestAssignment.Domain.Entities.ExceptionJournal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExceptionMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExceptionType")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("QueryString")
                        .HasColumnType("text");

                    b.Property<string>("RequestBody")
                        .HasColumnType("text");

                    b.Property<string>("RequestMethod")
                        .HasColumnType("text");

                    b.Property<string>("RequestPath")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EventId");

                    b.ToTable("ExceptionJournals");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 12, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 1001L,
                            ExceptionMessage = "Value cannot be null. (Parameter 'treeName')",
                            ExceptionType = "System.ArgumentNullException",
                            QueryString = "?name=",
                            RequestMethod = "GET",
                            RequestPath = "/api/tree",
                            StackTrace = "   at TestAssignment.Infrastructure.Services.TreeService.GetTree(String treeName) in TreeService.cs:line 45"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 12, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 1002L,
                            ExceptionMessage = "Node with the same name already exists in this tree",
                            ExceptionType = "TestAssignment.Domain.Exceptions.SecureException",
                            RequestBody = "{\"treeName\":\"Company\",\"name\":\"Engineering\",\"parentId\":1}",
                            RequestMethod = "POST",
                            RequestPath = "/api/tree/node",
                            StackTrace = "   at TestAssignment.Infrastructure.Services.TreeService.CreateNode(String treeName, String nodeName, Int64 parentId) in TreeService.cs:line 78"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 1003L,
                            ExceptionMessage = "An error occurred while saving the entity changes.",
                            ExceptionType = "Microsoft.EntityFrameworkCore.DbUpdateException",
                            RequestMethod = "POST",
                            RequestPath = "/api/journal",
                            StackTrace = "   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges()\n   at TestAssignment.Infrastructure.Services.JournalService.LogException(Exception ex) in JournalService.cs:line 23"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 12, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 1004L,
                            ExceptionMessage = "Cannot delete a node that has children",
                            ExceptionType = "System.InvalidOperationException",
                            RequestMethod = "DELETE",
                            RequestPath = "/api/tree/node/1",
                            StackTrace = "   at TestAssignment.Infrastructure.Services.TreeService.DeleteNode(Int64 nodeId) in TreeService.cs:line 125"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 1005L,
                            ExceptionMessage = "Invalid authentication token",
                            ExceptionType = "System.UnauthorizedAccessException",
                            RequestMethod = "POST",
                            RequestPath = "/api/partner/login",
                            StackTrace = "   at TestAssignment.Infrastructure.Services.AuthService.ValidateToken(String token) in AuthService.cs:line 67"
                        });
                });

            modelBuilder.Entity("TestAssignment.Domain.Entities.TreeNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("TreeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TreeName", "ParentId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_TreeNode_TreeName_ParentId_Name");

                    b.ToTable("TreeNodes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Acme Corporation",
                            TreeName = "Company"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Engineering",
                            ParentId = 1L,
                            TreeName = "Company"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Sales",
                            ParentId = 1L,
                            TreeName = "Company"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "HR",
                            ParentId = 1L,
                            TreeName = "Company"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Backend",
                            ParentId = 2L,
                            TreeName = "Company"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Frontend",
                            ParentId = 2L,
                            TreeName = "Company"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "DevOps",
                            ParentId = 2L,
                            TreeName = "Company"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2024, 10, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "North America",
                            ParentId = 3L,
                            TreeName = "Company"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2024, 10, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Europe",
                            ParentId = 3L,
                            TreeName = "Company"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Electronics",
                            TreeName = "Products"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Computers",
                            ParentId = 10L,
                            TreeName = "Products"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Mobile Devices",
                            ParentId = 10L,
                            TreeName = "Products"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Laptops",
                            ParentId = 11L,
                            TreeName = "Products"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedAt = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Desktops",
                            ParentId = 11L,
                            TreeName = "Products"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedAt = new DateTime(2024, 11, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Smartphones",
                            ParentId = 12L,
                            TreeName = "Products"
                        });
                });

            modelBuilder.Entity("TestAssignment.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "admin",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastLoginAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "user1",
                            CreatedAt = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastLoginAt = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "user2",
                            CreatedAt = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastLoginAt = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "testuser",
                            CreatedAt = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastLoginAt = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("TestAssignment.Domain.Entities.TreeNode", b =>
                {
                    b.HasOne("TestAssignment.Domain.Entities.TreeNode", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TestAssignment.Domain.Entities.TreeNode", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
